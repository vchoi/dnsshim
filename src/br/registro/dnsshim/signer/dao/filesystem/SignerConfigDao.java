/* Copyright (C) 2009 Registro.br. All rights reserved. 
* 
* Redistribution and use in source and binary forms, with or without 
* modification, are permitted provided that the following conditions are 
* met:
* 1. Redistribution of source code must retain the above copyright 
*    notice, this list of conditions and the following disclaimer.
* 2. Redistributions in binary form must reproduce the above copyright
*    notice, this list of conditions and the following disclaimer in the
*    documentation and/or other materials provided with the distribution.
* 
* THIS SOFTWARE IS PROVIDED BY REGISTRO.BR ``AS IS'' AND ANY EXPRESS OR
* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
* WARRANTIE OF FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
* EVENT SHALL REGISTRO.BR BE LIABLE FOR ANY DIRECT, INDIRECT,
* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
* BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
* OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
* TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
* USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
* DAMAGE.
 */
package br.registro.dnsshim.signer.dao.filesystem;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Properties;

import org.apache.log4j.Logger;

import br.registro.dnsshim.common.repository.FileSystemUtil;
import br.registro.dnsshim.common.server.Server.TransportType;
import br.registro.dnsshim.common.server.ServerConfig;
import br.registro.dnsshim.signer.repository.SignerConfigRepository;

public class SignerConfigDao implements SignerConfigRepository {
	private static final Logger logger = Logger.getLogger(SignerConfigDao.class);
	private final String BASE_DIR;
	private static final String EXTENSION = ".properties";

	public SignerConfigDao() {
		StringBuilder root = new StringBuilder();
		// {DNSSHIM_HOME|user.home}/dnsshim/signer/conf/signer.conf
		if (System.getenv("DNSSHIM_HOME") == null) {
			root.append(System.getProperty("user.home"));
			root.append(File.separatorChar);
			root.append("dnsshim");
		} else {
			root.append(System.getenv("DNSSHIM_HOME"));
		}
		root.append(File.separatorChar);
		root.append("signer");
		root.append(File.separatorChar);
		root.append("conf");
		root.append(File.separatorChar);
		File directory = new File(root.toString());
		try {
			FileSystemUtil.makePath(directory);
		} catch (IOException e) {
			logger.error(e.getMessage(), e);
		}
		BASE_DIR = root.toString();
	}

	@Override
	public ServerConfig load() throws FileNotFoundException, IOException {
		if (logger.isDebugEnabled()) {
			logger.debug("Loading signer configurations...");
		}

		StringBuilder path = new StringBuilder(BASE_DIR);
		path.append("signer");
		path.append(EXTENSION);
		
		File file = new File(path.toString());
		
		if (!file.exists()) {
			if (!file.createNewFile()){
				throw new IOException("Cannot create file:" + file);
			}
		}
		
		Properties conf = new Properties();
		FileInputStream fis = new FileInputStream(file);
		conf.load(fis);
		
		String port = conf.getProperty("server_port", "9797");
		String caFile = conf.getProperty("cert_file","");
		String caPasswd = conf.getProperty("cert_password","");
		String listen_address = conf.getProperty("listen_address","");
		
		ServerConfig config = new ServerConfig();
		config.setPort(Integer.parseInt(port));
		config.setTransportType(TransportType.TCP); // signer uses TCP
		config.setCaPath(caFile);
		config.setCaPasswd(caPasswd);
		config.setTls(true); // tls always enabled
		config.setListenAddress(listen_address);
		fis.close();
		
		// always keep a well-formed config file
		save(config);
		return config;
	}

	@Override
	public void save(ServerConfig config) throws IOException {
		if (logger.isDebugEnabled()) {
			logger.debug("Saving signer configurations...");
		}
		
		StringBuilder path = new StringBuilder(BASE_DIR);
		path.append("signer");
		path.append(EXTENSION);
		
		File file = new File(path.toString());
		
		Properties conf = new Properties();
		conf.put("server_port", String.valueOf(config.getPort()));
		conf.put("listen_address", config.getListenAddress());
		conf.put("cert_file", config.getCaPath());
		conf.put("cert_password", config.getCaPasswd());

		FileWriter fw = new FileWriter(file);
		conf.store(fw, "Generated by DNSSHIM");
		fw.close();
	}
}